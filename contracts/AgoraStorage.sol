// SPDX-License-Identifier: BUSL-1.1
pragma solidity ^0.8.17;
import "./Merchandise.sol";
import "./interfaces/ILogisticsLookup.sol";

abstract contract AgoraStorage {
    Merchandise public mToken;
    uint16 public marginRate;
    uint16 public feeRate;
    ILogisticsLookup public logisticsLookup;
    // Auto increase token id;
    uint256 public currentTokenId;
    uint256 public returnPeriod;

    /**
     * @notice Record the fees' and claims total
     */
    FeeInfo public feeInfo;
    struct FeeInfo {
        uint256 rewarded;
        uint256 claimed;
    }

    /**
     * @notice Map of the user's info
     */
    mapping(address => UserInfo) public users;
    struct UserInfo {
        uint16 marginRate;
        uint16 feeRate;
        uint8 rating;
    }

    /**
     * @notice Map of the good's info
     */
    mapping(uint256 => MerchandiseInfo) public merchandiseInfo;
    struct MerchandiseInfo {
        uint256 price;
        address seller;
        uint256 margin;
    }

    /**
     * @notice Map of token ID of buyer and their logisticsInfo
     * @dev Multiple buyers can own the same token ID
     */
    mapping(uint256 => mapping(address => Logistics)) public logisticsInfo;
    struct Logistics {
        // The amount of the goods bought or returned
        uint16 amount;
        // Becomes the buyer when returned
        address seller;
        // Price at the time of purchase
        uint256 price;
        string logisticsNo;
        // Hash value of the delivery address generated by keccak256
        bytes32 deliveryAddress;
        // Block number when bought
        uint256 orderTime;
        // Block number when delivered
        uint256 completeTime;
        // Block number when returned
        uint256 returnTime;
    }
}
